/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { BehaviorSubject, merge, timer } from 'rxjs';
import { debounce, distinctUntilChanged, partition, switchMap, tap } from 'rxjs/operators';
import { PendingRequestsInterceptor } from '../services/pending-requests-interceptor.service';
import { SpinnerVisibilityService } from '../services/spinner-visibility.service';
import { Spinkit } from '../spinkits';
export class NgHttpLoaderComponent {
    /**
     * @param {?} pendingRequestsInterceptor
     * @param {?} spinnerVisibility
     */
    constructor(pendingRequestsInterceptor, spinnerVisibility) {
        this.pendingRequestsInterceptor = pendingRequestsInterceptor;
        this.spinnerVisibility = spinnerVisibility;
        this.spinkit = Spinkit;
        this._isVisible$ = new BehaviorSubject(false);
        this.visibleUntil = Date.now();
        this.spinner = Spinkit.skWave;
        this.filteredUrlPatterns = [];
        this.filteredMethods = [];
        this.filteredHeaders = [];
        this.debounceDelay = 0;
        this.minDuration = 0;
        this.extraDuration = 0;
        this.entryComponent = null;
        const [showSpinner$, hideSpinner$] = partition((h) => h)(this.pendingRequestsInterceptor.pendingRequestsStatus$);
        this.subscriptions = merge(this.pendingRequestsInterceptor.pendingRequestsStatus$.pipe(switchMap(() => showSpinner$.pipe(debounce(() => timer(this.debounceDelay))))), showSpinner$.pipe(switchMap(() => hideSpinner$.pipe(debounce(() => this.getVisibilityTimer$())))), this.spinnerVisibility.visibility$)
            .pipe(distinctUntilChanged(), tap(h => this.updateExpirationDelay(h)))
            .subscribe(h => this._isVisible$.next(h));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nullifySpinnerIfEntryComponentIsDefined();
        this.initFilters();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @return {?}
     */
    get isVisible$() {
        return this._isVisible$.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    nullifySpinnerIfEntryComponentIsDefined() {
        if (this.entryComponent) {
            this.spinner = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initFilters() {
        this.initFilteredUrlPatterns();
        this.initFilteredMethods();
        this.initFilteredHeaders();
    }
    /**
     * @private
     * @return {?}
     */
    initFilteredUrlPatterns() {
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(e => this.pendingRequestsInterceptor.filteredUrlPatterns.push(new RegExp(e)));
        }
    }
    /**
     * @private
     * @return {?}
     */
    initFilteredMethods() {
        if (!(this.filteredMethods instanceof Array)) {
            throw new TypeError('`filteredMethods` must be an array.');
        }
        this.pendingRequestsInterceptor.filteredMethods = this.filteredMethods;
    }
    /**
     * @private
     * @return {?}
     */
    initFilteredHeaders() {
        if (!(this.filteredHeaders instanceof Array)) {
            throw new TypeError('`filteredHeaders` must be an array.');
        }
        this.pendingRequestsInterceptor.filteredHeaders = this.filteredHeaders;
    }
    /**
     * @private
     * @param {?} showSpinner
     * @return {?}
     */
    updateExpirationDelay(showSpinner) {
        if (showSpinner) {
            this.visibleUntil = Date.now() + this.minDuration;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getVisibilityTimer$() {
        return timer(Math.max(this.extraDuration, this.visibleUntil - Date.now()));
    }
}
NgHttpLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-http-loader',
                template: "<div id=\"spinner\" *ngIf=\"isVisible$ | async\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n",
                styles: ["#spinner{top:0;left:0;height:100%;width:100%;position:fixed;z-index:9999;display:flex;align-items:center;justify-content:center;opacity:.7;background-color:#f1f1f1}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"]
            }] }
];
/** @nocollapse */
NgHttpLoaderComponent.ctorParameters = () => [
    { type: PendingRequestsInterceptor },
    { type: SpinnerVisibilityService }
];
NgHttpLoaderComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    spinner: [{ type: Input }],
    filteredUrlPatterns: [{ type: Input }],
    filteredMethods: [{ type: Input }],
    filteredHeaders: [{ type: Input }],
    debounceDelay: [{ type: Input }],
    minDuration: [{ type: Input }],
    extraDuration: [{ type: Input }],
    entryComponent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinkit;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype._isVisible$;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.visibleUntil;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.backgroundColor;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinner;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredUrlPatterns;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredMethods;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredHeaders;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.debounceDelay;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.minDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.extraDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.entryComponent;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.pendingRequestsInterceptor;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.spinnerVisibility;
}
//# sourceMappingURL=data:application/json;base64,